# AUTOGENERATED! DO NOT EDIT! File to edit: 07a_trained_model.ipynb (unless otherwise specified).

__all__ = ['TrainedModel', 'TrainedMCDropoutModel', 'TrainedEnsemble']

# Internal Cell
from dataclasses import dataclass

import torch.nn

from .consistent_mc_dropout import (
    BayesianModule,
    get_ensemble_predictions_labels,
)

# Cell


class TrainedModel:
    """Evaluate a trained model."""

    def get_log_probs_N_K_C_labels_N(self, pool_loader, device):
        raise NotImplementedError()

    def get_log_probs_N_K_C(self, loader, device):
        return self.get_log_probs_N_K_C_labels_N(loader, device)[0]


@dataclass
class TrainedMCDropoutModel(TrainedModel):
    num_samples: int
    model: BayesianModule

    def get_log_probs_N_K_C_labels_N(self, loader, device):
        log_probs_N_K_C, labels_B = self.model.get_predictions_labels(
            num_samples=self.num_samples,
            loader=loader,
            device=device,
        )

        return log_probs_N_K_C, labels_B


@dataclass
class TrainedEnsemble(TrainedModel):
    models: [torch.nn.Module]

    def get_log_probs_N_K_C_labels_N(self, pool_loader, device):
        log_probs_N_K_C, labels_B = get_ensemble_predictions_labels(
            modules=self.models, loader=pool_loader, device=device
        )
        return log_probs_N_K_C, labels_B