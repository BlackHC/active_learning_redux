# AUTOGENERATED! DO NOT EDIT! File to edit: 07_black_box_training.ipynb (unless otherwise specified).

__all__ = ['train', 'create_metrics', 'LOG_INTERVAL', 'HEAVY_LOG_INTERVAL', 'handler_save_predictions',
           'get_predictions']

# Internal Cell

import torch
from torch import nn

from ignite.contrib.engines.common import setup_common_training_handlers, \
    add_early_stopping_by_val_score
from ignite.contrib.handlers import ProgressBar
from ignite.engine import create_supervised_trainer, create_supervised_evaluator, Events
from ignite.metrics import Accuracy, Loss, RunningAverage

# Cell


LOG_INTERVAL = 10
HEAVY_LOG_INTERVAL = 100


def train(*, model, train_loader, val_loader,
          patience:int, max_epochs:int, device:str, epochs_log:list):
    """
    :param model:
    :param train_loader:
    :param val_loader:
    :param metric_loader: We compute metrics for debugging and introspection purposes with this data.
    :param patience: How many epochs to wait for early-stopping.
    :param max_epochs:
    :param tb_log_dir:
    :param device:
    :return: Optimizer that was used for training.
    """
    # Move model before creating optimizer

    model.to(device)

    optimizer = torch.optim.AdamW(model.parameters())
    criterion = nn.CrossEntropyLoss()

    trainer = create_supervised_trainer(model, optimizer, criterion, device=device)

    metrics = create_metrics(criterion)

    validation_evaluator = create_supervised_evaluator(model, metrics=metrics, device=device)

    @trainer.on(Events.EPOCH_COMPLETED)
    def compute_metrics(engine):
        validation_evaluator.run(val_loader)

    RunningAverage(output_transform=lambda x: x).attach(trainer, 'crossentropy')

    setup_common_training_handlers(trainer, with_gpu_stats=True, log_every_iters=LOG_INTERVAL)


    ProgressBar(persist=False).attach(validation_evaluator, metric_names="all",
                                      event_name=Events.ITERATION_COMPLETED(every=LOG_INTERVAL))

    @validation_evaluator.on(Events.EPOCH_COMPLETED)
    def log_training_results(engine):
        metrics = engine.state.metrics
        epochs_log.append(metrics)

    # Add early stopping
    add_early_stopping_by_val_score(patience, validation_evaluator, trainer, "accuracy")

    # kick everything off
    trainer.run(train_loader, max_epochs=max_epochs)

    # Return the optimizer in case we want to continue training.
    return optimizer


def create_metrics(criterion):
    return {"accuracy": Accuracy(), "loss": Loss(criterion)}


# Cell

def handler_save_predictions(engine, target_list):
    @engine.on(Events.ITERATION_COMPLETED)
    def iteration_completed(engine):
        target_list.extend(engine.state.output[0])

def get_predictions(*, model, loader, device:str):
    evaluator = create_supervised_evaluator(model, device=device)

    predictions = []
    handler_save_predictions(evaluator, predictions)

    ProgressBar(persist=False).attach(evaluator, metric_names="all",
                                      event_name=Events.ITERATION_COMPLETED(every=LOG_INTERVAL))

    evaluator.run(loader)

    return predictions