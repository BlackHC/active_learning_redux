# AUTOGENERATED! DO NOT EDIT! File to edit: Z_dependency_injection.ipynb (unless otherwise specified).

__all__ = ['DependencyInjection']

# Cell
import dataclasses
from dataclasses import dataclass

# Cell


@dataclass
class DependencyInjection:
    config: dict
    supported_types: list = None

    def create_dataclass_type(self, dataclass_type, *args, **kwargs):
        resolved_args = self.resolve_dataclass_args(dataclass_type)
        final_args = {**resolved_args, **kwargs}

        args_str = ','.join(list(args) + [f'{key}={value}' for key, value in final_args.items()])
        print(f"Creating: {dataclass_type.__qualname__}({args_str})")
        return dataclass_type(*args, **final_args)

    def resolve_dataclass_args(self, dataclass_type):
        fields = dataclasses.fields(dataclass_type)

        resolved_args = {}
        field: dataclasses.Field
        for field in fields:
            type_specific_name = f"{dataclass_type.__qualname__}__{field.name}"
            if type_specific_name in self.config:
                resolved_args[field.name] = self.config[type_specific_name]
            elif field.name in self.config:
                resolved_args[field.name] = self.config[field.name]

            if self.supported_types and field.type in self.supported_types:
                resolved_args[field.name] = self.create_dataclass_type(field.type)

        print(f"Resolved: {dataclass_type.__qualname__} with {resolved_args}")

        return resolved_args