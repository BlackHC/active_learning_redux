# AUTOGENERATED! DO NOT EDIT! File to edit: 09b_experiment_repeated_acquisition_dirty_mnist.ipynb (unless otherwise specified).

__all__ = ['coldness_range', 'configs']

# Cell

import dataclasses
import traceback

from blackhc.project import is_run_from_ipython
from blackhc.project.experiment import embedded_experiments

#import batchbald_redux.acquisition_functions.bald
#import batchbald_redux.acquisition_functions.batchbald
from batchbald_redux import acquisition_functions, baseline_acquisition_functions
from .models import MnistModelTrainer
from .sampling_unified_experiment import SampledUnifiedExperiment, SampledExperimentDataConfig

# Cell

coldness_range = [1/4, 1., 4., 8., 16.]

configs = [
    SampledUnifiedExperiment(
        experiment_data_config=SampledExperimentDataConfig(
            id_dataset_name="DistributionalAmbiguousMNIST",
            initial_training_set_size=20,
            validation_set_size=4096,
            validation_split_random_state=0,
        ),
        seed=seed + 45682,
        acquisition_function=acquisition_function,
        acquisition_size=acquisition_size,
        num_pool_samples=num_pool_samples,
        max_training_set=300,
        model_trainer_factory=MnistModelTrainer,
        stochastic_mode=acquisition_functions.StochasticMode.TopK,
        allow_repeated_acquisition=allow_repeated_acquisition,
    )
    for seed in range(5)
    for acquisition_size in [10]
    for num_pool_samples in [100]
    for acquisition_function in [
        acquisition_functions.BALD,
    ]
    for allow_repeated_acquisition in [True, False]
]

if not is_run_from_ipython() and __name__ == "__main__":
    for job_id, store in embedded_experiments(__file__, len(configs)):
        config = configs[job_id]
        config.seed += job_id
        print(config)
        store["config"] = dataclasses.asdict(config)
        store["log"] = {}

        try:
            config.run(store=store)
        except Exception:
            store["exception"] = traceback.format_exc()
            raise