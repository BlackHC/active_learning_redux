# AUTOGENERATED! DO NOT EDIT! File to edit: 09b_experiment_mnist_epig_bootstrap_ablation.ipynb (unless otherwise specified).

__all__ = ['configs']

# Cell

import dataclasses
import traceback

from blackhc.project import is_run_from_ipython
from blackhc.project.experiment import embedded_experiments

from batchbald_redux import acquisition_functions
from batchbald_redux import baseline_acquisition_functions
from .unified_experiment import UnifiedExperiment
from .experiment_data import StandardExperimentDataConfig

from .models import MnistModelTrainer

# Cell


configs = [
    UnifiedExperiment(
        experiment_data_config=StandardExperimentDataConfig(
            id_dataset_name="MNIST",
            id_repetitions=id_repetitions,
            initial_training_set_size=20,
            validation_set_size=4096,
            validation_split_random_state=0,
            evaluation_set_size=0,
            add_dataset_noise=id_repetitions > 1,
            ood_dataset_config=None,
        ),
        seed=seed + 8945,
        acquisition_function=acquisition_function,
        acquisition_size=acquisition_size,
        num_pool_samples=num_pool_samples,
        max_training_set=120,
        model_trainer_factory=MnistModelTrainer,
        epig_bootstrap_type=bootstrap_type,
        epig_bootstrap_factor=bootstrap_factor
    )
    for seed in range(5)
    for acquisition_function in [
        acquisition_functions.EPIG,
    ]
    for acquisition_size in [1]
    for num_pool_samples in [100]
    for id_repetitions in [1]
    for (bootstrap_type, bootstrap_factors) in [(acquisition_functions.BootstrapType.SINGLE_BOOTSTRAP, (0.25, 0.5, 0.75)), (acquisition_functions.BootstrapType.PER_POINT_BOOTSTRAP, (0.5, 0.75, 0.9))]
    for bootstrap_factor in bootstrap_factors
]

if not is_run_from_ipython() and __name__ == "__main__":
    for job_id, store in embedded_experiments(__file__, len(configs)):
        config = configs[job_id]
        config.seed += job_id
        print(config)
        store["config"] = dataclasses.asdict(config)
        store["log"] = {}

        try:
            config.run(store=store)
        except Exception:
            store["exception"] = traceback.format_exc()
            raise